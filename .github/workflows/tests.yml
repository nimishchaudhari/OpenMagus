name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
      neo4j:
        image: neo4j:4.4
        env:
          NEO4J_AUTH: neo4j/password
        ports:
          - 7687:7687
          
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-asyncio pytest-cov
          pip install --upgrade chromadb
          
      - name: Setup dependencies
        run: |
          chmod +x scripts/setup_deps.sh
          sudo ./scripts/setup_deps.sh
          
      - name: Verify SQLite version
        run: |
          sqlite3 --version
          
      - name: Run tests
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: password
          LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
          LLM_MODEL: ${{ secrets.LLM_MODEL }}
        run: |
          # Run only the model router tests to verify the LLM_MODEL environment variable handling
          pytest tests/test_model_router.py tests/test_config.py tests/test_coordinator.py tests/test_knowledge.py tests/test_planner.py \
            --cov=./ \
            --cov-report=xml \
            --cov-report=term \
            -v \
            --asyncio-mode=auto
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          
      - name: Check test coverage threshold
        run: |
          COVERAGE=$(coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
          if (( $(echo "$COVERAGE < 30" | bc -l) )); then
            echo "Test coverage is below 30% ($COVERAGE%)"
            exit 1
          fi
          echo "Test coverage is $COVERAGE%"
